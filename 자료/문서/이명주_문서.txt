되돌리기
1.reset
 - 아예 커밋 자체를 다 되돌려 놓음
 - 사용이 간단
 - 작업들이 다 날라갈 수 있음

2. revert
 - 되돌리기를 커밋으로 남기는 방법
 - 충돌 해결이 이슈

3. 브랜치
 - 브랜치를 백업으로 이용하는 방법
 - 백업을 브랜치로 남겨두었으므로 충돌은 많지 않다.
 - 브랜치가 점점 복잡해짐

스태시 
-임시저장소
-커밋하려는 내용들을 잠시 저장
- 다시 적용하거나 삭제가 가능

rebase
-merge와 유사하다
-내 브랜치를 새로운 base로 만드는 작업(내 브랜치를->메인으로)
-메인 브랜치쪽 작업량<내 브랜치 작업량 ->rebase하는 것이 더 좋을 수도 있다.
-브랜치 그래프라 복잡해지지 않아요
-위험하니 조심스럽게 사용할 것
-나를 제외한 모든 사람들의 충돌을 해결을 해

Git 기초 명령어
-git clone [원격저장소] [로컬저장소] : 원격저장소를 복사
- git add : 스테이지에 올리는 작업
git commit : 스테이지 영역에 있는 작업을 커밋으로 만듬 커밋이라함은 일종의 작업단위
git push 원격저장소에 커밋을 올린다
코드 뭉치 버리기 :코밋활동을 하기 전에 그냥 작성했던 거 버리기
브랜치 생성 및 변경
-git branch :  기존 내용을 유지하고 새로운 기능이나 내용을 추가하고 싶을 때마다 브랜치 생성
-git chechout : 특정 브랜치에서 작업을 하고 싶을 때 체크아웃을 해야함
- 소스트리에서 체크아웃은 브랜치 이름을 더블클릭하면 변경되므로 편리

병합
-git merge : 서로 변경한 부분이 겹치지 않는 경우 그냥 병합이 일어남(fast-forward)
:서로 작업한 부분이 겹치는 경우에는 진짜 병합을 해야함->충돌이 발생->충돌 해결
충돌 해결 - 에디터에서 직접 코드 작성 담당자들이 모여서 최종 코드를 함께 완성. 코프로그래밍, 페어프로그래밍
	-확인해보니 둘중 한 코드는 버려도 될 경우에는 저장소 것 사용 또는 내것 사용등을 선택해서 적용

stash
-체크아웃전, 커밋하려던 내용을 임시로 보관
-유용하다

rebase
-사실상 merge인데 현재 브랜치가 대상 브랜치보다 더 상위로 바꿀 때 
-위험하니 조심스럽게 사용할 것


커밋 메세지를 잘 쓰자
주석은 최소한으로 쓰자
기능 개발할 때마다 커밋하기

=============================================


Git 기초 명령어
 - git clone [원격저장소] [로컬저장소] : 원격 저장소를 복사
- git add : 스테이지에 올리는 작업 (stage)
- git commit : 스테이지 영역에 있는 작업을 커밋으로 만듬 (커밋이라 함은....일종의 작업 단위)
- git push : 원격 저장소에 커밋을 올린다

코드 뭉치 버리기
- commit 활동을 하기 이전에 그냥 작성했던거 버림

브랜치 생성 및 변경
- git branch : 기존 내용을 유지하고 새로운 기능이나 내용 추가 하고 싶을 때마다 브랜치 생성
- git checkout :  특정 브랜치에서 작업을 하고 싶을 때 체크아웃을 해야함
- 소스트리에서 체크아웃은 브랜치 이름을 더블클릭하기만 해도 변경되므로 편리

병합
- git merge 
: 서로 작업한 부분이 겹치지 않는 경우 그냥 병합이 일어남 (fast-forward)
: 서로 작업한 부분이 겹치는 경우에는 진짜 병합을 해야함 -> 충돌 발생 -> 충돌 해결

충돌해결
- 에디터에서 직접 코드 작성했던 담당자들이 모여서 최종 코드를 함께 완성(co-programing)
- 근데 확인해보니 둘중 한쪽 코드는 버려도 될 경우에는 저장소것 사용 또는 내것 사용 등을 선택해서 적용

stash
- 체크아웃전, 커밋하려던 내용을 임시로 보관
- 유용하다

rebase
- 사실상 merge인데 현재 브랜치가 대상 브랜치보다 더 상위로 바꿀 때
- 위험하니 조심스럽게 사용할 것

커밋 메시지를 잘 쓰자
주석은 최소로 남기자
기능 개발할 때마다 커밋하기

팀별 미션
1. main 브랜치 생성
2. 자신의 브랜치에 준비한 자료들을 업로드(이미지, 폰트 등)
3. main 브랜치에 병합
4. 폴더 구조등은 개발자들끼리 협의
5. 리소스 폴더를 구성하고
6. Readme.md 파일에 매뉴얼을 작성
merge, rebase 상관 없음
7. 1회 이상 revert 사용후 커밋하기
8. Readme.md파일에 팀원들 수고하셨습니다. 인사들 각자 남기기
8.1인 1회 이상 revert 사용 후 커밋하기
9. 최종적으로 만든 main 깃허브 감상하기
